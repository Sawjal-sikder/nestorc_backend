name: Django CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.12"

jobs:
  # Job 1: Run tests with PostgreSQL and Redis
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env file for testing
        run: |
          echo "SECRET_KEY=test-secret-key-for-github-actions" >> .env
          echo "DEBUG=True" >> .env
          echo "ALLOWED_HOSTS=*" >> .env
          echo "DATABASE_ENGINE=django.db.backends.postgresql" >> .env
          echo "DATABASE_NAME=test_db" >> .env
          echo "DATABASE_USER=postgres" >> .env
          echo "DATABASE_PASSWORD=postgres" >> .env
          echo "DATABASE_HOST=localhost" >> .env
          echo "DATABASE_PORT=5432" >> .env
          echo "EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend" >> .env
          echo "CELERY_BROKER_URL=redis://localhost:6379/0" >> .env
          echo "CELERY_RESULT_BACKEND=redis://localhost:6379/1" >> .env
          echo "CORS_ALLOW_ALL_ORIGINS=True" >> .env
          echo "SITE_ID=1" >> .env
          echo "ACCOUNT_EMAIL_VERIFICATION=none" >> .env
          echo "STATIC_URL=/static/" >> .env
          echo "MEDIA_URL=/media/" >> .env

      - name: Create static directory
        run: |
          mkdir -p static

      - name: Run migrations in correct order
        run: |
          # Apply core Django migrations first
          python manage.py migrate contenttypes
          python manage.py migrate auth
          # Apply custom user model migrations
          python manage.py migrate accounts
          # Apply all remaining migrations
          python manage.py migrate

      - name: Run tests
        run: |
          python manage.py test

      - name: Run Django system checks
        run: |
          python manage.py check

      - name: Run Django security checks
        run: |
          python manage.py check --deploy

      - name: Collect static files
        run: |
          python manage.py collectstatic --noinput

  # Job 2: Code quality and linting
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort bandit safety

      - name: Run flake8 (PEP 8 compliance)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: |
          black --check --diff .

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff .

  # Job 3: Security scanning
  security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          pip install -r requirements.txt

      - name: Run Bandit security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: Run Safety dependency scan
        run: |
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  # Job 4: Deploy to staging (develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create staging .env file
        run: |
          echo "SECRET_KEY=${{ secrets.STAGING_SECRET_KEY }}" >> .env
          echo "DEBUG=False" >> .env
          echo "ALLOWED_HOSTS=${{ secrets.STAGING_ALLOWED_HOSTS }}" >> .env
          echo "DATABASE_ENGINE=${{ secrets.STAGING_DATABASE_ENGINE }}" >> .env
          echo "DATABASE_NAME=${{ secrets.STAGING_DATABASE_NAME }}" >> .env
          echo "DATABASE_USER=${{ secrets.STAGING_DATABASE_USER }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.STAGING_DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_HOST=${{ secrets.STAGING_DATABASE_HOST }}" >> .env
          echo "DATABASE_PORT=${{ secrets.STAGING_DATABASE_PORT }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.STAGING_EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.STAGING_EMAIL_HOST_PASSWORD }}" >> .env

      - name: Create static directory
        run: |
          mkdir -p static

      - name: Run migrations
        run: |
          python manage.py migrate contenttypes
          python manage.py migrate auth
          python manage.py migrate accounts
          python manage.py migrate

      - name: Collect static files
        run: |
          python manage.py collectstatic --noinput

      - name: Deploy to staging server
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          # Add your staging deployment commands here
          # Examples:
          # - rsync to staging server
          # - SCP files to server
          # - Call deployment API
          # - Update staging database
          echo "Staging deployment placeholder - customize with your deployment strategy"

  # Job 5: Deploy to production (main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create production .env file
        run: |
          echo "SECRET_KEY=${{ secrets.PRODUCTION_SECRET_KEY }}" >> .env
          echo "DEBUG=False" >> .env
          echo "ALLOWED_HOSTS=${{ secrets.PRODUCTION_ALLOWED_HOSTS }}" >> .env
          echo "DATABASE_ENGINE=${{ secrets.PRODUCTION_DATABASE_ENGINE }}" >> .env
          echo "DATABASE_NAME=${{ secrets.PRODUCTION_DATABASE_NAME }}" >> .env
          echo "DATABASE_USER=${{ secrets.PRODUCTION_DATABASE_USER }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.PRODUCTION_DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_HOST=${{ secrets.PRODUCTION_DATABASE_HOST }}" >> .env
          echo "DATABASE_PORT=${{ secrets.PRODUCTION_DATABASE_PORT }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.PRODUCTION_EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.PRODUCTION_EMAIL_HOST_PASSWORD }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env

      - name: Create static directory
        run: |
          mkdir -p static

      - name: Run migrations
        run: |
          python manage.py migrate contenttypes
          python manage.py migrate auth
          python manage.py migrate accounts
          python manage.py migrate

      - name: Collect static files
        run: |
          python manage.py collectstatic --noinput

      - name: Deploy to production server
        run: |
          echo "ðŸš€ Deploying to production environment..."
          # Add your production deployment commands here
          # Examples:
          # - rsync to production server
          # - SCP files to server
          # - Call deployment API
          # - Update production database
          # - Restart application server
          echo "Production deployment placeholder - customize with your deployment strategy"

      - name: Notify deployment success
        run: |
          echo "âœ… Production deployment completed successfully!"
          # Add notification logic here (Slack, email, etc.)
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"ðŸš€ Production deployment successful!"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}
